<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>重置GitLab的root用户密码</title>
      <link href="/2024/02/03/a5/"/>
      <url>/2024/02/03/a5/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>​        最近一直想通过GitLab+Jenkins+Docker做一个自动的集成部署整合，前段时间安装的GitLab的登录密码忘了，重新安装这个软件很麻烦，因为GitLab很占存储，而至于为什么用GitLab而不是Gitee，因为是用的本地服务器，而不是云服务器，如果Gitee的数据向GiteeLab发送不好搞，像搞支付流程那样内网穿透？有点麻烦吧。自己的电脑16G内存，应该勉强能带的动。参考网上的一些解决方案，更改GitLab密码方案自己总结如下。</p><h3 id="解决详细流程（亲测可用）"><a href="#解决详细流程（亲测可用）" class="headerlink" title="解决详细流程（亲测可用）"></a>解决详细流程（亲测可用）</h3><p>1 我们这个GitLab通过docker安装，所以先通过本地Linux服务器，进入到Docker内。aaf02c529d24 是这个容器的ID</p><p><code>docker exec -it aaf02c529d24 /bin/</code></p><p>2 执行以下代码，时间可能会稍长一些，出现下图标记的内容说明成功，再往下走</p><p> <code>gitlab-rails console -e production</code></p><p><img src="/images/article16.jpg" alt="图一"></p><p>3 通过命令查找，确定用户为“root”</p><p><code>user = User.find_by_username &#39;root&#39;</code></p><p><img src="/images/article17.jpg" alt="图二"></p><p>4 输入修改的密码，再确认密码</p><p><code>user.password=&quot;xxx&quot;</code></p><p><code>user.password_confirmation=&quot;xxx&quot;</code></p><p>5 保存重置信息，并结束</p><p><code>user.save!</code></p><p><code>exit</code></p><p>保存的时候报以下错误，说明你的密码太简单，比如admin这种有规律。改一下就行</p><p>Validation failed: Password must not contain commonly used combinations of words and letters (ActiveRecirb(main):013:0&gt; user.password&#x3D;</p><p>以上操作完，不用重启就能登录账号，上传代码了。push的时候我还碰到一个小问题，就是上传超时。检查发现从GitLab粘贴的http地址是错的，不是你Linux的ip地址，这个注意一下，要不然排查很久。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ruoyi导入excel数据去重</title>
      <link href="/2024/01/24/a4/"/>
      <url>/2024/01/24/a4/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>​        最近项目中用到开源平台ruoyi，有一个Excel导入需求功能是这样的：把excel数据导入系统。刚开始百度查解决方法，这个平台本来就有现成的ExcelUtil工具。把前端传来的数据直接转成List数据，然后遍历插入数据库即可。前端部分的代码，官网还是很完整的，粘贴上直接能用。</p><p><img src="/images/article15.jpg" alt="前端操作页"></p><p>​         但这样无脑导入数据，在实际应用中还是存在不完美的地方，如图有一个可选项（是否更新已经存在的用户数据），如果数据表中有已经存在的数据，那么为了避免数据重复，有一个覆盖的方案是会更合理的。</p><p>​网上疯狂的找相关的资料，但后端的代码几乎没有。没办法只能自己慢慢想，最后经过无数次修改，调试，三天时间终于有了基本能使用的效果。主要是突然想到用map集合，因为list集合里面是对象类型，对象里面才是id，刚开始只想用list集合操作，但效果都不太好，后来索性用map。key存id，value存对象值。</p><p>​最后基本实现根据danganid判断是否重复，如果重复，则excel新数据覆盖系统的旧数据，如果不重复，则导入进系统。</p><h3 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h3><p> 基本上复制过来改一下地址就行。<a href="https://doc.ruoyi.vip/ruoyi-vue/document/htsc.html#%E5%AF%BC%E5%85%A5%E5%AE%9E%E7%8E%B0%E6%B5%81%E7%A8%8B">ruoyi官网文档</a></p><h3 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h3><p>直接上代码，请原来我的代码分层不讲究…..</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * excel导入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;@ss.hasPermi(&#x27;hetongq:info:ex&#x27;)&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/importData&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> AjaxResult <span class="title function_">importData</span><span class="params">(MultipartFile file, <span class="type">boolean</span> updateSupport)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line"><span class="comment">//        System.out.println(updateSupport);</span></span><br><span class="line">        <span class="comment">//传来false，不更新已经存在的数据</span></span><br><span class="line">        <span class="keyword">if</span>(updateSupport==<span class="literal">false</span>)&#123;</span><br><span class="line">            ExcelUtil&lt;DanganInfo&gt; util = <span class="keyword">new</span> <span class="title class_">ExcelUtil</span>&lt;DanganInfo&gt;(DanganInfo.class);</span><br><span class="line">            List&lt;DanganInfo&gt; userList = util.importExcel(file.getInputStream());</span><br><span class="line"><span class="comment">//        System.out.println(userList);</span></span><br><span class="line">            <span class="keyword">for</span> (DanganInfo str : userList)&#123;</span><br><span class="line">                danganInfoService.insertDanganInfo(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//获取传来的Excel数据</span></span><br><span class="line">            ExcelUtil&lt;DanganInfo&gt; util = <span class="keyword">new</span> <span class="title class_">ExcelUtil</span>&lt;DanganInfo&gt;(DanganInfo.class);</span><br><span class="line">            List&lt;DanganInfo&gt; userList = util.importExcel(file.getInputStream());</span><br><span class="line">            <span class="comment">/*SpringSecurity工具类：获取登录用户，</span></span><br><span class="line"><span class="comment">             因为项目需求是不同用户只对自己的添加的数据</span></span><br><span class="line"><span class="comment">             有增删改查的权限,传参的时候要加上用户标识字段，</span></span><br><span class="line"><span class="comment">             这里先只分为Admin所有数据的操作权限，和其它只有自己的数据。</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="type">LoginUser</span> <span class="variable">loginUser</span> <span class="operator">=</span> SecurityUtils.getLoginUser();</span><br><span class="line">            <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> loginUser.getUser().getUserName();</span><br><span class="line">            <span class="comment">//获取数据库的信息</span></span><br><span class="line">            <span class="type">DanganInfo</span> <span class="variable">danganInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DanganInfo</span>();</span><br><span class="line">            danganInfo.setCreateby(username);</span><br><span class="line">            List&lt;DanganInfo&gt; list = danganInfoService.selectDanganInfoList(danganInfo);</span><br><span class="line">                </span><br><span class="line">            <span class="type">List</span> <span class="variable">list2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">            <span class="comment">//Excel表的数据，list转为map，key为danganId，value是DanganInfo对象</span></span><br><span class="line">            Map&lt;String,DanganInfo&gt; map=userList.stream().collect(Collectors.toMap(DanganInfo::getDanganId, (p) -&gt; p));</span><br><span class="line">            <span class="comment">//数据库表的数据，list转为map</span></span><br><span class="line">            Map&lt;String,DanganInfo&gt; map1=list.stream().collect(Collectors.toMap(DanganInfo::getDanganId, (p) -&gt; p));</span><br><span class="line">            System.out.println(JSON.toJSONString(map));</span><br><span class="line">                <span class="comment">//遍历数据库表的danganId字段，后面要比对</span></span><br><span class="line">                <span class="keyword">for</span> (String in : map1.keySet()) &#123;</span><br><span class="line">                    list2.add(in);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//以DanganId为标准，如果相等说明Excel的数据有重复，以Excel数据为标准更新</span></span><br><span class="line">                <span class="keyword">for</span> (String in : map.keySet()) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (DanganInfo info : list) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(in.equals(info.getDanganId()))&#123;</span><br><span class="line">                            danganInfoService.updateDanganInfo1(map.get(in));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//list2中是所有数据库表的DanganId字段。Excel中的字段遍历，</span></span><br><span class="line">                <span class="comment">// 如果包含Danganid，说明这个Danganid存在，不用添加，否则添加，这个逻辑慢慢体会就理解了</span></span><br><span class="line">                <span class="keyword">for</span> (String in : map.keySet()) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(list2.contains(in)) &#123;</span><br><span class="line">                        System.out.println(in);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        danganInfoService.insertDanganInfo(map.get(in));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> AjaxResult.success(<span class="string">&quot;上传成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>虽然ruoyi提供了后台管理的一些功能，但在实际企业需求，也有一些特殊的地方。以前听人说，工作就是复制粘贴，还有要把数据结构算法学好，数据结构与算法没啥用…..我觉得作为一个普通人，还是要有自己的判断，走自己的路。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> ruoyi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊一聊Linux相关的话题</title>
      <link href="/2024/01/20/a2/"/>
      <url>/2024/01/20/a2/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我记得在我2020年那会，刚开始学习Linux命令的时候，要先在本地电脑下载一个虚拟机，然后在安装操作系统，接下来就比较抵触Linux操作系统和Windwos操作系统操作方式和界面显示。当然随着使用频率的增加，现在也适应了这种操作方式。本地虚拟机安装Linux和云服务器都用过，感觉各有优缺吧。本地不用花钱，云服务器最低配的话一年至少100块。平时学习一些小项目基本两者使用差别不大。无非是云服务器可以把项目部署上，可以远程访问。对新手来说主要问题就是vmware这种本地虚拟化软件开始会有很多坑，而这种坑对开发来讲其实是没有意义的坑。所以今天我把本地安装LInux遇到的坑总结一下，大家以后碰到了做一个参考。</p><p>本篇重点讨论问题，具体安装教程网上很多。</p><h3 id="1-先判断虚拟机是否关闭防火墙"><a href="#1-先判断虚拟机是否关闭防火墙" class="headerlink" title="1 先判断虚拟机是否关闭防火墙"></a>1 先判断虚拟机是否关闭防火墙</h3><p>查看防火墙状态<br><code>systemctl status firewalld</code><br>关闭防火墙（临时）<br><code>service iptables stop</code></p><h3 id="2然后判断虚拟机网络和vmware是否在同一个网段"><a href="#2然后判断虚拟机网络和vmware是否在同一个网段" class="headerlink" title="2然后判断虚拟机网络和vmware是否在同一个网段"></a>2然后判断虚拟机网络和vmware是否在同一个网段</h3><p>vmvare的网段</p><p><img src="/images/article11.png" alt="Lena"></p><p>通过以下命令设置Linux的ip</p><p><code>vi /etc/sysconfig/network-scripts/ifcfg-ens33</code></p><p><img src="/images/article12.png" alt="Lena"></p><p>注意看图片标识的ip，网关。</p><p>这样配置的话本地能和虚拟机互相ping通</p><p>但是虚拟机ping <a href="www.baidu.com">百度</a>有问题，还有就是使用docker，拉取镜像失败。说明不能联网。查百度发现是DNS设置有问题</p><h3 id="3配置Linux的DNS"><a href="#3配置Linux的DNS" class="headerlink" title="3配置Linux的DNS"></a>3配置Linux的DNS</h3><p><code>vi /etc/resolv.conf</code></p><p><img src="/images/article13.png" alt="Lena"></p><h3 id="问题解决："><a href="#问题解决：" class="headerlink" title="问题解决："></a>问题解决：</h3><p><img src="/images/article14.png" alt="Lena"></p><p>这样就能在linux愉快的下载各种软件了！</p><p>tip:如果克隆了相同的虚拟机，这里除了IP地址还要改一下UUID</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/2024/01/10/a3/"/>
      <url>/2024/01/10/a3/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>后端开发，项目部署在Linux服务器上，所以对于开发人员，要对一般对常用的操作命令要有一定的掌握，但我觉得没必要花太多时间研究很多操作系统细节。这篇就汇总一下平时常用的，以便不时查阅。</p><p>创建多级目录文件夹（如果没有上级文件夹，要加-p）</p><p><code>mkdir -p /Users/name/docker/jenkins</code></p><p>列出当前系统中所有正在监听的端口及对应的进程。在输出结果中，我们可以找到占用目标端口的进程PID，并进一步确定该进程的详细信息</p><p><code>netstat -tlnp</code></p><p>查找文件在哪个目录</p><p><code>find / -name &quot;文件名&quot;</code></p><p>启动jar包项目，并打印日志（关闭窗口不影响项目运行）</p><p><code>nohup java -jar ruoyi-admin.jar &gt;&gt; ./info.log &amp;</code></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/12/10/hello-world/"/>
      <url>/2023/12/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * from user <span class="built_in">where</span> <span class="built_in">id</span>=1;</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alert(&#x27;Hello World!&#x27;);</span><br><span class="line">alert(&#x27;Hello World!&#x27;);</span><br><span class="line">alert(&#x27;Hello World!&#x27;);</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% codeblock [title] [lang:java] [url] [link text] [additional options] %&#125;</span><br><span class="line"></span><br><span class="line">code snippet</span><br><span class="line"></span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alert(&#x27;Hello World!&#x27;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL优化技巧</title>
      <link href="/2023/10/01/a1/"/>
      <url>/2023/10/01/a1/</url>
      
        <content type="html"><![CDATA[<h2 id="优化技巧"><a href="#优化技巧" class="headerlink" title="优化技巧"></a>优化技巧</h2><h3 id="避免使用select"><a href="#避免使用select" class="headerlink" title="避免使用select"></a><strong>避免使用select</strong></h3><p>很多时候，我们写sql语句时，为了方便，喜欢直接使用<code>select *</code>，一次性查出表中所有列的数据。</p><p><code>select * from user where id=1;</code></p><p>在实际业务场景中，可能我们真正需要使用的只有其中一两列。查了很多数据，但是不用，白白浪费了数据库资源，比如：内存或者cpu。</p><p>此外，多查出来的数据，通过网络IO传输的过程中，也会增加数据传输的时间。</p><p>还有一个最重要的问题是：<code>select *</code>不会走<code>覆盖索引</code>，会出现大量的<code>回表</code>操作，而从导致查询sql的性能很低。</p><p>那么，如何优化呢？</p><p><code>select name,age from user where id=1;</code></p><p>sql语句查询时，只查需要用到的列，多余的列根本无需查出来。</p><h3 id="小表驱动大表"><a href="#小表驱动大表" class="headerlink" title="小表驱动大表"></a><strong>小表驱动大表</strong></h3><p><code>select * from order</code><br><code>where user_id in (select id from user where status=1)</code></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
