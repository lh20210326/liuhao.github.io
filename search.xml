<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>国密Nginx服务器部署</title>
      <link href="/2024/05/09/a9/"/>
      <url>/2024/05/09/a9/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&nbsp;&nbsp;  &nbsp; &nbsp; &nbsp; 有段时间没写博客了，现在有个这样的任务：系统原来的Https加密算法不是用的国密算法，现在要改为国密。有了之前OpenSSL生成证书和密钥的经验，我感觉不难，但今天实际操作，也踩了不少坑。</p><h3 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h3><p>这里要准备国密浏览器（奇安信浏览器），国密OpenSSL与国密Nginx。这些可看我的<strong>参考资料</strong>，然后找到下载地址。还有最好先找一个比较干净的centos环境，在nginx上测试，如果没问题，然后再修改系统的nginx配置。</p><h3 id="在Nginx上编译部署"><a href="#在Nginx上编译部署" class="headerlink" title="在Nginx上编译部署"></a>在Nginx上编译部署</h3><ol><li>下载gmssl_openssl_1.1_bxx.tar.gz到&#x2F;root&#x2F;下</li><li>解压 tar xzfm gmssl_openssl_1.1_bxx.tar.gz -C &#x2F;usr&#x2F;local</li><li>下载<a href="http://nginx.org/download/nginx-1.24.0.tar.gz">nginx-1.24.0.tar.gz</a>到&#x2F;root&#x2F;下</li><li>解压 tar xzfm nginx-1.24.0.tar.gz</li><li>进入目录 cd &#x2F;root&#x2F;nginx-1.24.0</li><li>编辑auto&#x2F;lib&#x2F;openssl&#x2F;conf，将全部$OPENSSL&#x2F;.openssl&#x2F;修改为$OPENSSL&#x2F;并保存</li><li>编译配置</li></ol><pre class="line-numbers language-yaml"><code class="language-yaml">./configure \<span class="token punctuation">-</span><span class="token punctuation">-</span>without<span class="token punctuation">-</span>http_gzip_module \<span class="token punctuation">-</span><span class="token punctuation">-</span>with<span class="token punctuation">-</span>http_ssl_module \<span class="token punctuation">-</span><span class="token punctuation">-</span>with<span class="token punctuation">-</span>http_stub_status_module \<span class="token punctuation">-</span><span class="token punctuation">-</span>with<span class="token punctuation">-</span>http_v2_module \<span class="token punctuation">-</span><span class="token punctuation">-</span>with<span class="token punctuation">-</span>stream \<span class="token punctuation">-</span><span class="token punctuation">-</span>with<span class="token punctuation">-</span>file<span class="token punctuation">-</span>aio \<span class="token punctuation">-</span><span class="token punctuation">-</span>with<span class="token punctuation">-</span>openssl="/usr/local/gmssl"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="8"><li>编译安装<br>make install</li><li>&#x2F;usr&#x2F;local&#x2F;nginx即为生成的nginx目录</li></ol><h3 id="配置示例"><a href="#配置示例" class="headerlink" title="配置示例"></a>配置示例</h3><p>与之前不同的是，在国密实验室生成证书，然后在服务器放入证书，如下示例：keystore&#x2F;是文件夹，sm2.demo1.gmssl.cn.sig.crt.pem是文件名。</p><p>测试证书使用<a href="https://www.gmcrt.cn/">www.gmcrt.cn</a>签发。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># https 服务配置</span>server<span class="token punctuation">{</span>  listen       443 ssl;;  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;  ssl_ciphers ECDHE<span class="token punctuation">-</span>RSA<span class="token punctuation">-</span>AES128<span class="token punctuation">-</span>GCM<span class="token punctuation">-</span>SHA256<span class="token punctuation">:</span>AES128<span class="token punctuation">-</span>SHA<span class="token punctuation">:</span>DES<span class="token punctuation">-</span>CBC3<span class="token punctuation">-</span>SHA<span class="token punctuation">:</span>ECC<span class="token punctuation">-</span>SM4<span class="token punctuation">-</span>CBC<span class="token punctuation">-</span>SM3<span class="token punctuation">:</span>ECC<span class="token punctuation">-</span>SM4<span class="token punctuation">-</span>GCM<span class="token punctuation">-</span>SM3;  ssl_verify_client off;    ssl_certificate keystore/sm2.demo1.gmssl.cn.sig.crt.pem;  ssl_certificate_key keystore/sm2.demo1.gmssl.cn.sig.key.pem;    ssl_certificate keystore/sm2.demo1.gmssl.cn.enc.crt.pem;  ssl_certificate_key keystore/sm2.demo1.gmssl.cn.enc.key.pem;    location /  <span class="token punctuation">{</span>    root html;    index index.html index.htm;  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/article30.jpg" alt="启动nginx"></p><h3 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h3><p>csdn文章：<a href="https://blog.csdn.net/new9232/article/details/134562784">https://blog.csdn.net/new9232/article/details/134562784</a></p><p><a href="https://www.gmssl.cn/gmssl/index.jsp">国密SSL实验室：</a></p><h4 id="CentOS7升级OpenSSL版本"><a href="#CentOS7升级OpenSSL版本" class="headerlink" title="CentOS7升级OpenSSL版本"></a>CentOS7升级OpenSSL版本</h4><p>1、查看linux服务器内核版本</p><p>   cat &#x2F;proc&#x2F;version</p><p>2、查看本地OpenSSL版本</p><p>   openssl version</p><p>   如果不是最新的openSSL 1.1.1版本，则可以进行升级</p><p>   下载最新的openssl版本</p><p>   wget <a href="https://www.openssl.org/source/openssl-1.1.1c.tar.gz">https://www.openssl.org/source/openssl-1.1.1c.tar.gz</a></p><p>   或者</p><p>   外网下载openssl-1.1.1c.tar.gz安装包，然后拷贝到服务器上</p><p>3、解压并编译安装</p><p>   tar -zxvf openssl-1.1.1c.tar.gz</p><p>   cd openssl-1.1.1c</p><p>   .&#x2F;config –prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;openssl   #如果此步骤报错,需要安装perl以及gcc包</p><p>   make &amp;&amp; make install</p><p>   mv &#x2F;usr&#x2F;bin&#x2F;openssl &#x2F;usr&#x2F;bin&#x2F;openssl.bak</p><p>   ln -sf &#x2F;usr&#x2F;local&#x2F;openssl&#x2F;bin&#x2F;openssl &#x2F;usr&#x2F;bin&#x2F;openssl</p><p>   echo “&#x2F;usr&#x2F;local&#x2F;openssl&#x2F;lib” &gt;&gt; &#x2F;etc&#x2F;ld.so.conf</p><p>   ldconfig -v                    # 设置生效</p><p>4、查看本地OpenSSL版本</p><p>   openssl version</p><p>   如果是最新的openSSL 1.1.1版本,则说明升级成功<br>原文链接：<a href="https://blog.csdn.net/CDKingHang/article/details/132525535">https://blog.csdn.net/CDKingHang/article/details/132525535</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Openssl生成可靠的CA证书使网址http变https</title>
      <link href="/2024/03/24/a12/"/>
      <url>/2024/03/24/a12/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&nbsp;&nbsp; &nbsp;&nbsp;项目的访问首页，原来做的是http访问，现在要https也能访问。看似好像就添加个“s”，实际上搞起来还是费点事。大概2年前买了云服务器的时候，做过类的的，但那个时候是云服务器，证书什么的厂家提供，再加上时间也过去很久，很多东西都忘了。</p><h3 id="OpenSSL生成证书"><a href="#OpenSSL生成证书" class="headerlink" title="OpenSSL生成证书"></a>OpenSSL生成证书</h3><p> &nbsp;公司这边当时提供了cfssl的证书生成文档，但官网不好找，用linux下载安装包还特别慢。好不容易下载上，对服务器证书签名又出现问题。无奈之下最后改用OpenSSL，因为搜寻b站找资料，看到有up主用到这个工具，讲的还不错。就改用这个。算是踩坑了吧。</p><h4 id="下载OpenSSL"><a href="#下载OpenSSL" class="headerlink" title="下载OpenSSL"></a>下载OpenSSL</h4><p><a href="https://slproweb.com/products.html">https://slproweb.com/products.html</a> 这是官网下载地址，   有linux和win两个版本，我下载的win版本</p><h4 id="安装OpenSSL"><a href="#安装OpenSSL" class="headerlink" title="安装OpenSSL"></a>安装OpenSSL</h4><p>windows安装直接无脑默认下一步，我的默认安装路径是（C:\Program Files\OpenSSL-Win64\bin）</p><h4 id="在Win生成证书"><a href="#在Win生成证书" class="headerlink" title="在Win生成证书"></a>在Win生成证书</h4><p>在OpenSSL默认路径bin目录下cmd，输入以下命令，c盘dev文件夹生成对应文件</p><pre class="line-numbers language-yaml"><code class="language-yaml">//生成私钥.keyopenssl genrsa <span class="token punctuation">-</span>des3 <span class="token punctuation">-</span>out c<span class="token punctuation">:</span>/dev/server.key//由私钥创建待签名证书openssl.exe req <span class="token punctuation">-</span>new <span class="token punctuation">-</span>key c<span class="token punctuation">:</span>/dev/server.key <span class="token punctuation">-</span>out c<span class="token punctuation">:</span>/dev/pub.csr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建一个CA机构"><a href="#创建一个CA机构" class="headerlink" title="创建一个CA机构"></a>创建一个CA机构</h4><pre class="line-numbers language-yaml"><code class="language-yaml">//生成CA私钥openssl.exe genrsa <span class="token punctuation">-</span>out c<span class="token punctuation">:</span>/dev/myca.key 2048//生成CA代签名证书openssl.exe req <span class="token punctuation">-</span>new <span class="token punctuation">-</span>key c<span class="token punctuation">:</span>/dev/myca.key <span class="token punctuation">-</span>out c<span class="token punctuation">:</span>/dev/myca.csr//生成CA根证书openssl.exe x509 <span class="token punctuation">-</span>req <span class="token punctuation">-</span>in c<span class="token punctuation">:</span>/dev/myca.csr <span class="token punctuation">-</span>extensions v3_ca <span class="token punctuation">-</span>signkey c<span class="token punctuation">:</span>/dev/myca.key <span class="token punctuation">-</span>out c<span class="token punctuation">:</span>/dev/myca.crt//对服务器证书签名openssl x509 <span class="token punctuation">-</span>days 365 <span class="token punctuation">-</span>req <span class="token punctuation">-</span>in c<span class="token punctuation">:</span>/dev/pub.csr <span class="token punctuation">-</span>extensions v3_req <span class="token punctuation">-</span>CAkey c<span class="token punctuation">:</span>/dev/myca.key <span class="token punctuation">-</span>CA c<span class="token punctuation">:</span>/dev/myca.crt <span class="token punctuation">-</span>CAcreateserial <span class="token punctuation">-</span>out c<span class="token punctuation">:</span>/dev/server.crt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考资料：</p><p><a href="https://www.bilibili.com/video/BV16x4y1u7T4/?spm_id_from=333.788&vd_source=7a3d5cd3fa11ce74c3a55924dc40fe84">https://www.bilibili.com/video/BV16x4y1u7T4/?spm_id_from=333.788&amp;vd_source=7a3d5cd3fa11ce74c3a55924dc40fe84</a></p><h3 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h3><p>在nginx配置文件：nginx.conf加入下面配置</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># https 服务配置</span>    server <span class="token punctuation">{</span>        listen 443 default ssl;        ssl on;        ssl_certificate      /opt/cert/server.crt;        ssl_certificate_key  /opt/cert/server.key;        server_name localhost;        location / <span class="token punctuation">{</span>            root   /usr/local/nginx/html/dist;            try_files $uri $uri/ /index.html;            index  index.html index.htm;                    <span class="token punctuation">}</span>        location /prod<span class="token punctuation">-</span>api/ <span class="token punctuation">{</span>            proxy_set_header Host $http_host;            proxy_set_header X<span class="token punctuation">-</span>Real<span class="token punctuation">-</span>IP $remote_addr;            proxy_set_header REMOTE<span class="token punctuation">-</span>HOST $remote_addr;            proxy_set_header X<span class="token punctuation">-</span>Forwarded<span class="token punctuation">-</span>For $proxy_add_x_forwarded_for;            proxy_pass http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>8080/;        <span class="token punctuation">}</span>        error_page   500 502 503 504  /50x.html;        location = /50x.html <span class="token punctuation">{</span>            root   html;        <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="添加SSL支持"><a href="#添加SSL支持" class="headerlink" title="添加SSL支持"></a>添加SSL支持</h4><p><a href="https://blog.csdn.net/H900302/article/details/120825981">https://blog.csdn.net/H900302/article/details/120825981</a></p><p>这篇博客讲的细节很到位！</p><h4 id="查日志看出问题"><a href="#查日志看出问题" class="headerlink" title="查日志看出问题"></a>查日志看出问题</h4><p>&nbsp;但在这里有一个很恶心的bug，那就是上面配置文件没有问题，但报错nginx访问404，notfound。然后我就一直百度，反复改配置文件的内容，一直以为配置文件出问题，改了配置文件很多地方没有解决。直到最后查了一下nginx的error.log日志文件，发现访问路径似曾相识。”&#x2F;home&#x2F;ruoyi&#x2F;projects&#x2F;static-web&#x2F;index.html”，这个路径不是和ruoyi官网默认的路径很相似？于是按照网站的操作：通过make模板进行编译，新的nginx文件覆盖旧的文件，然后重启奇迹出现，访问成功！这里覆盖旧文件的底层原理我不清楚，但真的坑啊。</p><pre class="line-numbers language-yaml"><code class="language-yaml">2024/03/24 21<span class="token punctuation">:</span>25<span class="token punctuation">:</span>08 <span class="token punctuation">[</span>error<span class="token punctuation">]</span> 17506<span class="token comment" spellcheck="true">#0: *371 "/home/ruoyi/projects/static-web/index.html" is not found (2: No such file or directory), client: 192.168.10.212, server: localhost, request: "GET / HTTP/1.1", host: "192.168.10.195"</span>2024/03/24 21<span class="token punctuation">:</span>32<span class="token punctuation">:</span>54 <span class="token punctuation">[</span>error<span class="token punctuation">]</span> 17506<span class="token comment" spellcheck="true">#0: *375 "/home/ruoyi/projects/static-web/index.html" is not found (2: No such file or directory), client: 192.168.10.212, server: localhost, request: "GET / HTTP/1.1", host: "192.168.10.195"</span>2024/03/24 21<span class="token punctuation">:</span>37<span class="token punctuation">:</span>50 <span class="token punctuation">[</span>error<span class="token punctuation">]</span> 17506<span class="token comment" spellcheck="true">#0: *381 "/home/ruoyi/projects/static-web/index.html" is not found (2: No such file or directory), client: 192.168.10.212, server: localhost, request: "GET / HTTP/1.1", host: "192.168.10.195"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>参考资料：</p><p><a href="https://doc.ruoyi.vip/ruoyi/other/faq.html#%E5%A6%82%E4%BD%95%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E6%94%AF%E6%8C%81https%E8%AE%BF%E9%97%AE">https://doc.ruoyi.vip/ruoyi/other/faq.html#%E5%A6%82%E4%BD%95%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E6%94%AF%E6%8C%81https%E8%AE%BF%E9%97%AE</a></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>&nbsp;这次这个问题解决起来也是花了些时间，但还好最终解决，要不然心情就比较沮丧了。</p><p>&nbsp;</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码 </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用ukey登录系统</title>
      <link href="/2024/03/14/a11/"/>
      <url>/2024/03/14/a11/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&nbsp;&nbsp; &nbsp;&nbsp;现在项目有这样的改造需求，在原来用户名+密码的登录方式，添加上通过ukey的登录方式。需要前端Vue、jwt交互、后端权限验证、数据类型转换等知识。对我而言综合性很强，表面看虽然只是登录，但解决问题的过程碰到很多问题。</p><h3 id="业务流程"><a href="#业务流程" class="headerlink" title="业务流程"></a>业务流程</h3><p> &nbsp;先把大体的业务流程梳理清楚</p><p> &nbsp;前端：浏览器通过js调用厂家提供的方法，可以实现读取ukey序列号，调用前端提供的签名算法。还可以导出保存在ukey的证书。证书由负责密码的同事生成。</p><p> &nbsp;后端：调用调用签名验签服务器生成随机数，验证证书，签名值。</p><p><img src="/images/article28.jpg" alt="业务流程"></p><h3 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h3><p>由于我前端基础比较差，解决前端的问题也比较吃力。很多相关工作要煜总（全栈架构师）帮助，首先在原来登录页下面，加入一个切换按钮，点击后切换为ukey登录方式。然后要写js的逻辑，比如请求后端的代码，渲染返回数据等等。 </p><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p> &nbsp;我是用厂家已经提供好一部分前端js示例代码，先把从后端获得随机数改成固定的字符，证书和签名值生成后打印在控制台。在后端单元测试直接用上面的数据调用上面说到的数据，验证签名。这一步很关键，如果这一步通过，那么后面出现什么问题，排查范围就能缩小了。这块出现的bug就是在调用验签方法的传入参数，参数是byte[]类型，在这个类型的数据外包一个这个转换：Base64.decode()。当时因为解决这个bug耽误了不少时间。</p><p>&nbsp;还有公司有一个系统（算法验证平台）可以对签名验签进行验证，可以辅助测试。如果这个平台对测试的参数通过，那就是业务代码哪有问题。</p><p><img src="/images/article29.jpg" alt="前端浏览器控制台"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>&nbsp;单元测试通过的话，相当于又前进了一步，接下来就是写具体代码了。前端主要是煜总（全栈架构师）写，当时出现了一个问题，随机数设置成固定值的话，系统验签是没问题的，但代码改成从签名验签获取，总验证不成功。还是返回上部进行单元测试，多分析，发现前端数据格式转的有点问题。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>&nbsp;刚开始做这个功能的很迷茫，毕竟自己很多知识掌握的不扎实，也花了一些时间，差点奔溃，但还好后来坚持下去了。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对接签名验签服务器</title>
      <link href="/2024/03/02/a10/"/>
      <url>/2024/03/02/a10/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&nbsp;&nbsp;  &nbsp; &nbsp; &nbsp;公司现在弄的这个基于java开发的管理系统，上次对接的密码机，这次对接签名验签服务器，其实流程很类似：根据厂家提供的文档，调用厂家提供的Api接口，注意参数和返回值就行。硬件设备已经在公司的机房架设好了，硬件客户端可以登录上查看一些参数。但这里也遇到了很多坑，调试花了些时间。</p><h3 id="文件上传代码"><a href="#文件上传代码" class="headerlink" title="文件上传代码"></a>文件上传代码</h3><p>&nbsp;基于ruoyi自带的FileUploadUtils工具类，有个upload通用的文件上传方法，要在这个功能基于这个方法添加上的一个附加的功能：上传一个文件同时，并且对这个文件的完整性做检验。那用什么做呢，公司领导要求调用签名验签服务器这个设备。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 文件上传     *     * @param baseDir 相对应用的基目录     * @param file 上传的文件     * @param allowedExtension 上传文件类型     * @return 返回上传成功的文件名     * @throws FileSizeLimitExceededException 如果超出最大大小     * @throws FileNameLengthLimitExceededException 文件名太长     * @throws IOException 比如读写文件出错时     * @throws InvalidExtensionException 文件校验异常     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String <span class="token function">upload</span><span class="token punctuation">(</span>String baseDir<span class="token punctuation">,</span> MultipartFile file<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> allowedExtension<span class="token punctuation">)</span>            <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">int</span> fileNamelength <span class="token operator">=</span> Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fileNamelength <span class="token operator">></span> FileUploadUtils<span class="token punctuation">.</span>DEFAULT_FILE_NAME_LENGTH<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">FileNameLengthLimitExceededException</span><span class="token punctuation">(</span>FileUploadUtils<span class="token punctuation">.</span>DEFAULT_FILE_NAME_LENGTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">assertAllowed</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> allowedExtension<span class="token punctuation">)</span><span class="token punctuation">;</span>        String fileName <span class="token operator">=</span> <span class="token function">extractFilename</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输入流</span>        InputStream in <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取上传文件的绝对路径</span>        String absPath <span class="token operator">=</span> <span class="token function">getAbsoluteFile</span><span class="token punctuation">(</span>baseDir<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出流</span>        FileOutputStream fileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>absPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">4096</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        ByteArrayOutputStream out <span class="token operator">=</span> null<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//定义一个byte[],存储数据流文件</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes1<span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//前端传过来的输入流读取</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token operator">=</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            out<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>            bytes1 <span class="token operator">=</span> out<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//对数据流签名</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sign <span class="token operator">=</span> SecurityUtils<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>bytes1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//存入到硬盘</span>        fileOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>sign<span class="token punctuation">)</span><span class="token punctuation">;</span>        in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fileOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义文件类型，包含上传文件的地址</span>        File file1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>absPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n1<span class="token punctuation">;</span>        FileInputStream fileInputStream <span class="token operator">=</span> null<span class="token punctuation">;</span>        ByteArrayOutputStream out1<span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//定义一个输出流</span>            fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file1<span class="token punctuation">)</span><span class="token punctuation">;</span>            out1 <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//签名值</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n1 <span class="token operator">=</span> fileInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>               out1<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//从刚上传的文件中，用流读取 </span>               out1<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//数据类型转换：流转为byte[]</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes2 <span class="token operator">=</span> out<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>bytes2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//验签，返回结果如果是true，验签成功，否则失败，byte2数据原文，out1数据原文签名后的值</span>            <span class="token keyword">boolean</span> result<span class="token operator">=</span> SecurityUtils<span class="token punctuation">.</span><span class="token function">verifySign</span><span class="token punctuation">(</span>bytes2<span class="token punctuation">,</span> out1<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//校验失败,弹出提示</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token operator">==</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"数据完整性校验失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"数据完整性校验失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>            fileInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            out1<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">getPathFileName</span><span class="token punctuation">(</span>baseDir<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="调用签名验签的代码"><a href="#调用签名验签的代码" class="headerlink" title="调用签名验签的代码"></a>调用签名验签的代码</h3><p>&nbsp;以下是根据厂家提供的api方法，自己封装的工具方法，这里有一个bug，我自己单元测试的时候，方法传参很随意，用的String，结果String和byte []转换的有点冗余，把冗余的删了，代码也更清晰了，bug也解决了。这是我反复debug发现。只能说自己的技术还是很菜啊！</p><p>SecurityUtils.sign(byte[] b1)对数据流签名</p><p>SecurityUtils.verifySign(byte[] b2,byte[] b3) 对数据流验签</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**     * sm2签名，调用签名验签服务器     * @param data 代签名的原文     * @return 签名值     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token function">sign</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>        FmApi api <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FmApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String ip <span class="token operator">=</span> <span class="token string">"xxx.xxx.xxx.xxx"</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> ips <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        ips<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> ip<span class="token punctuation">;</span>        api<span class="token punctuation">.</span><span class="token function">FM_DSVS_Connection</span><span class="token punctuation">(</span>ips<span class="token punctuation">,</span> <span class="token number">2024</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"连接成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sign <span class="token operator">=</span> api<span class="token punctuation">.</span><span class="token function">FM_DSVS_SignData</span><span class="token punctuation">(</span>xxx<span class="token punctuation">,</span> xxx<span class="token punctuation">,</span>xxx<span class="token punctuation">,</span> xxx<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"签名成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>sign<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sign<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**     * sm2验签，调用签名验签服务器     * @param data  代签名的原文     * @param singData  签名值     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">verifySign</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> singData<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 7.2直接将证书放入验签</span>        FmApi api <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FmApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String ip <span class="token operator">=</span> <span class="token string">"xxx.xxx.xxx.xxx"</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> ips <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        ips<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> ip<span class="token punctuation">;</span>        api<span class="token punctuation">.</span><span class="token function">FM_DSVS_Connection</span><span class="token punctuation">(</span>ips<span class="token punctuation">,</span> <span class="token number">2024</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"连接成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//证书</span>        String cert <span class="token operator">=</span> <span class="token string">"xxxxxxxxxxxxxxx"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> state <span class="token operator">=</span> api<span class="token punctuation">.</span><span class="token function">FM_DSVS_VerifySignedData</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> Base64<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>cert<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> data<span class="token punctuation">,</span> singData<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试验证"><a href="#测试验证" class="headerlink" title="测试验证"></a>测试验证</h3><p>&nbsp;本地idea运行调试，在<code>File file1 = new File(absPath);</code>打断点，然后点击上传文件按钮，程序会在断点处停下。然后修改上传文件的内容，如图我是随意删除了两个字符。</p><p><img src="/images/article27.png" alt="测试"></p><p>前端页面会弹出“数据完整性校验失败”</p><p>如果没有打断点，文件是可以直接上传成功的，这就是测试文件的完整性成功。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>&nbsp;这节运用到了java基础数据流部分的知识。解决问题首先是理清思路，然后匹配技术解决方案。对接这种物理机的代码，和以前学习连接数据库JDBC很类似。只不过现在有些连接数据库框架比如Mybatis都太成熟了，封装迭代。从以上代码中可以看出，我的基础还是太薄弱了。再有就是现在只是做到最基本对接，实际企业级大项目，信息安全的软件业务也是很复杂的，比如签名验签服务器提供很多其它功能接口我都完全看不懂。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins+GitLab自动化部署SpringBoot项目（2024版）</title>
      <link href="/2024/02/16/a8/"/>
      <url>/2024/02/16/a8/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&nbsp;&nbsp;  &nbsp; &nbsp; &nbsp;在我上个博客，用的SpringBoot整合项目，前后端不分离。项目最初有很多要改动的地方，每次改动，都要重新部署打包，传到云服务，再用命令启动项目。这样重复的工作很枯燥单调，一个小博客如此，何况企业级的项目，因此这篇聊到的技术就是解决这样的问题。还有我当时在北京某银行外包，银行的项目都是大型项目，开发流程也很专业。实际工作中他们就用到了自动化部署。这个工作主要是运维负责，对于一个开发来说，虽然主要工作是写代码，但我对这样的提高工作效率的工具还是有一些兴趣，所以学习学习。</p><h3 id="手动构建"><a href="#手动构建" class="headerlink" title="手动构建"></a>手动构建</h3><p>&nbsp;毕竟是学习，所以把一些细节该简化就简化。先把握整体思路，从简到难。我们先实现的需求是：从本地提交代码到gitlab，然后手动在Jenkins点构建，项目重新发布成功。</p><h4 id="一、准备SpringBoot项目"><a href="#一、准备SpringBoot项目" class="headerlink" title="一、准备SpringBoot项目"></a>一、准备SpringBoot项目</h4><p>&nbsp; 在本地IDEA创建一个SpringBoot项目，这个项目是目的是能反馈最直观效果的。所以可以搞一个很精简版的，连数据库都不用连接，这里给出我自己创建好的，<a href="https://gitee.com/zhengshuojun/demo-git">gitee地址</a>。你可以直接下载拿来使用。</p><p> 我在创建这个的时候碰到的主要小问题如下：</p><p>SpringBoot打的jar包，在执行java -jar 提示no main manifest attribute</p><p>原因：pom.xml没有引入以下配置，没有的话源码工程内添加后，重新打jar包。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>build<span class="token operator">></span>    <span class="token operator">&lt;</span>plugins<span class="token operator">></span>        <span class="token operator">&lt;</span>plugin<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>maven<span class="token operator">-</span>plugin<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>plugin<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>plugins<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>build<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有一个问题是我这个项目不连数据库，但在启动的时候SpringBoot会扫描数据库配置，你没有配置它默认会识别并报错，所以我这边在SpringBoot启动类后面加如下注解，把数据库配置检测排除。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token punctuation">(</span>exclude<span class="token operator">=</span> <span class="token punctuation">{</span>DataSourceAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="二、准备好环境"><a href="#二、准备好环境" class="headerlink" title="二、准备好环境"></a>二、准备好环境</h4><p> &nbsp; 所需软件GitLab（v16.7.0），Docker，Jenkins（2.442），Maven，jdk11，VMware 等等，所有环境都在本地虚拟机上运行，本机电脑内存至少16G，两台虚拟机，一台负责启动GitLab，另一台负责Jenkins和SpringBoot项目。</p><p>&nbsp; GitLab用Docker启动，Jenkins在官网下载war包，用java -jar启动，现在Jenkins官方对jdk版本的要求是至少是jdk11及以上。所以如果你看网上一些教学资料用的jdk1.8，还会出现问题。Jenkins安装插件要把下载地址改为国内镜像，我当时下载maven插件的时候，即使改为国内镜像也很慢。还有本篇文章尽量强调版本，因为一些老教程的Jenkins必须更新，要不然连插件都下不了。具体操作还是以官网为准吧。</p><p>  调试过程中，发现jar包生成了。但没有构建成功，可以用java -jar把这个包启动一看，测试一下这个包有没有问题。</p><h4 id="三、遇到的问题"><a href="#三、遇到的问题" class="headerlink" title="三、遇到的问题"></a>三、遇到的问题</h4><p>如下报错：</p><pre class="line-numbers language-yaml"><code class="language-yaml">Waiting for Jenkins to finish collecting data<span class="token punctuation">[</span>JENKINS<span class="token punctuation">]</span> Archiving /root/.jenkins/workspace/yuzong/pom.xml to work.yinchuan/demoGIt/1.0<span class="token punctuation">-</span>SNAPSHOT/demoGIt<span class="token punctuation">-</span>1.0<span class="token punctuation">-</span>SNAPSHOT.pom<span class="token punctuation">[</span>JENKINS<span class="token punctuation">]</span> Archiving /root/.jenkins/workspace/yuzong/target/demoGIt<span class="token punctuation">-</span>1.0<span class="token punctuation">-</span>SNAPSHOT.jar to work.yinchuan/demoGIt/1.0<span class="token punctuation">-</span>SNAPSHOT/demoGIt<span class="token punctuation">-</span>1.0<span class="token punctuation">-</span>SNAPSHOT.jar/root/.jenkins/workspace/yuzong/pom.xml is not inside /root/.jenkins/workspace/yuzong/root/.jenkins/workspace/yuzong/; will archive in a separate pass/root/.jenkins/workspace/yuzong/target/demoGIt<span class="token punctuation">-</span>1.0<span class="token punctuation">-</span>SNAPSHOT.jar is not inside /root/.jenkins/workspace/yuzong/root/.jenkins/workspace/yuzong/; will archive in a separate pass<span class="token key atrule">FATAL</span><span class="token punctuation">:</span> Unable to produce a script file<span class="token key atrule">java.nio.charset.UnmappableCharacterException</span><span class="token punctuation">:</span> Input length = 1    at java.base/java.nio.charset.CoderResult.throwException(CoderResult.java<span class="token punctuation">:</span>275)    at java.base/sun.nio.cs.StreamEncoder.implWrite(StreamEncoder.java<span class="token punctuation">:</span>306)    at java.base/sun.nio.cs.StreamEncoder.implWrite(StreamEncoder.java<span class="token punctuation">:</span>281)    at java.base/sun.nio.cs.StreamEncoder.write(StreamEncoder.java<span class="token punctuation">:</span>125)    at java.base/java.io.OutputStreamWriter.write(OutputStreamWriter.java<span class="token punctuation">:</span>211)    at java.base/java.io.BufferedWriter.flushBuffer(BufferedWriter.java<span class="token punctuation">:</span>120)    at java.base/java.io.BufferedWriter.close(BufferedWriter.java<span class="token punctuation">:</span>268)    at hudson.FilePath$CreateTextTempFile.invoke(FilePath.java<span class="token punctuation">:</span>1696)    at hudson.FilePath$CreateTextTempFile.invoke(FilePath.java<span class="token punctuation">:</span>1666)    at hudson.FilePath.act(FilePath.java<span class="token punctuation">:</span>1236)    at hudson.FilePath.act(FilePath.java<span class="token punctuation">:</span>1219)    at hudson.FilePath.createTextTempFile(FilePath.java<span class="token punctuation">:</span>1660)<span class="token key atrule">Caused</span><span class="token punctuation">:</span> <span class="token key atrule">java.io.IOException</span><span class="token punctuation">:</span> Failed to create a temp file on /root/.jenkins/workspace/yuzong    at hudson.FilePath.createTextTempFile(FilePath.java<span class="token punctuation">:</span>1662)    at hudson.tasks.CommandInterpreter.createScriptFile(CommandInterpreter.java<span class="token punctuation">:</span>202)    at hudson.tasks.CommandInterpreter.perform(CommandInterpreter.java<span class="token punctuation">:</span>120)    at hudson.tasks.CommandInterpreter.perform(CommandInterpreter.java<span class="token punctuation">:</span>92)    at hudson.tasks.BuildStepMonitor$1.perform(BuildStepMonitor.java<span class="token punctuation">:</span>20)    at hudson.model.AbstractBuild$AbstractBuildExecution.perform(AbstractBuild.java<span class="token punctuation">:</span>818)    at hudson.maven.MavenModuleSetBuild$MavenModuleSetBuildExecution.build(MavenModuleSetBuild.java<span class="token punctuation">:</span>944)    at hudson.maven.MavenModuleSetBuild$MavenModuleSetBuildExecution.doRun(MavenModuleSetBuild.java<span class="token punctuation">:</span>894)    at hudson.model.AbstractBuild$AbstractBuildExecution.run(AbstractBuild.java<span class="token punctuation">:</span>526)    at hudson.model.Run.execute(Run.java<span class="token punctuation">:</span>1895)    at hudson.maven.MavenModuleSetBuild.run(MavenModuleSetBuild.java<span class="token punctuation">:</span>543)    at hudson.model.ResourceController.execute(ResourceController.java<span class="token punctuation">:</span>101)    at hudson.model.Executor.run(Executor.java<span class="token punctuation">:</span>442)Build step 'Execute shell' marked build as failurechannel stopped<span class="token key atrule">Finished</span><span class="token punctuation">:</span> FAILURE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我的解决方案：</p><p>&nbsp; 把shell后面的注释部分删除了，可能是这批字符有特殊字段，这个问题排查了很久。</p><p><img src="/images/article25.jpg" alt="报错信息"></p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">[</span>yuzong<span class="token punctuation">]</span> $ /bin/sh <span class="token punctuation">-</span>xe /tmp/jenkins4245332453348869109.shchannel stopped+ cd /yuzong+ chmod 777 /yuzong/start.sh+ sh start.sh<span class="token key atrule">start.sh</span><span class="token punctuation">:</span> line 5<span class="token punctuation">:</span> <span class="token key atrule">$'\r'</span><span class="token punctuation">:</span> command not found<span class="token key atrule">start.sh</span><span class="token punctuation">:</span> line 19<span class="token punctuation">:</span> syntax error<span class="token punctuation">:</span> unexpected end of fileBuild step 'Execute shell' marked build as failure<span class="token key atrule">Finished</span><span class="token punctuation">:</span> FAILURE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>shell脚本报错：“syntax error: unexpected end of file“ 原因和解决：</p><p><a href="https://blog.csdn.net/xijinno1/article/details/129760506">&nbsp; 解决方案</a></p><p>我的解决方案：在windows中，notepad++编辑器右下角可直接修改文档格式，如下图：</p><p><img src="/images/article24.jpg" alt="修改文档格式"></p><p>问题解决</p><pre class="line-numbers language-yaml"><code class="language-yaml">Waiting for Jenkins to finish collecting data<span class="token punctuation">[</span>JENKINS<span class="token punctuation">]</span> Archiving /root/.jenkins/workspace/yuzong/pom.xml to work.yinchuan/demoGIt/1.0<span class="token punctuation">-</span>SNAPSHOT/demoGIt<span class="token punctuation">-</span>1.0<span class="token punctuation">-</span>SNAPSHOT.pom<span class="token punctuation">[</span>JENKINS<span class="token punctuation">]</span> Archiving /root/.jenkins/workspace/yuzong/target/demoGIt<span class="token punctuation">-</span>1.0<span class="token punctuation">-</span>SNAPSHOT.jar to work.yinchuan/demoGIt/1.0<span class="token punctuation">-</span>SNAPSHOT/demoGIt<span class="token punctuation">-</span>1.0<span class="token punctuation">-</span>SNAPSHOT.jar/root/.jenkins/workspace/yuzong/pom.xml is not inside /root/.jenkins/workspace/yuzong/root/.jenkins/workspace/yuzong/; will archive in a separate pass/root/.jenkins/workspace/yuzong/target/demoGIt<span class="token punctuation">-</span>1.0<span class="token punctuation">-</span>SNAPSHOT.jar is not inside /root/.jenkins/workspace/yuzong/root/.jenkins/workspace/yuzong/; will archive in a separate pass<span class="token punctuation">[</span>yuzong<span class="token punctuation">]</span> $ /bin/sh <span class="token punctuation">-</span>xe /tmp/jenkins16459832435429712068.shchannel stopped+ cd /yuzong+ chmod 777 /yuzong/start.sh+ sh start.sh+ BUILD_ID=dontKillMe+ /yuzong/start.sh<span class="token key atrule">Finished</span><span class="token punctuation">:</span> SUCCESS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有如下提交代码的问题，这个问题很常见。</p><p><strong>Push rejected: Push to 123&#x2F;master was rejected</strong></p><p>原因是你在本地创建了一个项目仓库，然后gitee上创建一个仓库。</p><p>因为他们是两个不同的项目，要把两个不同的项目合并，git需要添加一句代码，在 <code>git pull</code> 之后，最新的版本需要添加 <code>--allow-unrelated-histories</code> 告诉 git 允许不相关历史合并</p><p><code>git pull origin2 master --allow-unrelated-histories</code></p><p><img src="/images/article26.jpg" alt="IDEA的Terminal框输入"></p><p>然后再push就可以了</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>网上的资料很多，以下我推荐的资料，文档视频都很全，细节到位。</p><p><a href="https://www.ydlclass.com/">元动力 </a>   </p><p><a href="https://www.bilibili.com/video/BV1bS4y1471A/?p=11&spm_id_from=333.1007.top_right_bar_window_history.content.click&vd_source=38bcae4cd982d6ea9ac7f77c1ac5038a">b站尚硅谷</a></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>搞这个集成部署，原理上很简单，难就在实操。稍老的教程有些地方对不上，再加上插件下载很慢，占用内存大，gitlab启来10分钟左右吧。好在网上相关资料多，有耐心多调试即可。我最后搞好也不是一下子搞成的，而是把它分成好几个部分，每个部分分别调好，总体在调试。后续还有相关内容会继续更新，敬请期待。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo问题汇总（Hexo代码高亮显示）</title>
      <link href="/2024/02/09/a7/"/>
      <url>/2024/02/09/a7/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&nbsp;&nbsp;  &nbsp; &nbsp; &nbsp;  Hexo是简洁高效的博客框架，用的是前端的技术，通过Markdown解析生成静态网页。我这个博客就是用的Hexo，部署在github上。相比于上个部署在云服务器的博客，整个博客轻量和很多。而且页面美观，功能齐全。当然在使用方面也碰到了各种问题，这篇文章就是做一个汇总，把我遇到最棘手的问题总结如下，大家做一个参考，如果你也碰到类似问题，参考我的文章解决了，那我这个博客就显得更有意义！</p><h3 id="代码高亮显示"><a href="#代码高亮显示" class="headerlink" title="代码高亮显示"></a>代码高亮显示</h3><p>&nbsp; 这是没有高亮显示的效果，显示效果也太丑了。</p><p><img src="/images/article21.jpg" alt="原来的代码显示效果"></p><p>于是网上找了很多帖子，我的解决方案是这样</p><p>1 先安装这样的插件</p><p><code>npm i -S hexo-prism-plugin</code></p><p>2 然后在项目的根目录_config.yml文件中修改syntax_highlighter，原来的值是highlighter.js</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//_config.yml文件部分</span>syntax_highlighter<span class="token punctuation">:</span> prism<span class="token punctuation">.</span>min<span class="token punctuation">.</span>jshighlight<span class="token punctuation">:</span>  enable<span class="token punctuation">:</span> <span class="token boolean">false</span>  line_number<span class="token punctuation">:</span> <span class="token boolean">false</span>  auto_detect<span class="token punctuation">:</span> <span class="token boolean">false</span>  tab_replace<span class="token punctuation">:</span> <span class="token string">''</span>  wrap<span class="token punctuation">:</span> <span class="token boolean">true</span>  hljs<span class="token punctuation">:</span> <span class="token boolean">false</span>prismjs<span class="token punctuation">:</span>  enable<span class="token punctuation">:</span> <span class="token boolean">true</span>  preprocess<span class="token punctuation">:</span> <span class="token boolean">true</span>  line_number<span class="token punctuation">:</span> <span class="token boolean">true</span>  tab_replace<span class="token punctuation">:</span> <span class="token string">''</span>prism_plugin<span class="token punctuation">:</span>  mode<span class="token punctuation">:</span> <span class="token string">'preprocess'</span>    # realtime<span class="token operator">/</span>preprocess  theme<span class="token punctuation">:</span> <span class="token string">'tomorrow'</span>  line_number<span class="token punctuation">:</span> <span class="token boolean">true</span>    # <span class="token keyword">default</span> <span class="token boolean">false</span>  custom_css<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3 在这个页面<a href="https://prismjs.com/download.html">prismjs 下载页面</a>下载自己定制的prism.css文件，粘贴到这个路径下：hexo\themes\hexo-theme-matery\source\libs\prism </p><p>以上操作后，会显示效果，担有个小问题，就是代码中会有@#123，@#125这样的的转义字符。</p><p>找到自己的项目名&#x2F;node_modules\hexo-prism-plugin\src\index.js</p><p>把原来const map用以下覆盖就行</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//hexo博客中有些代码的花括号被转义</span><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">'&amp;#39;'</span><span class="token punctuation">:</span> <span class="token string">'\''</span><span class="token punctuation">,</span>  <span class="token string">'&amp;amp;'</span><span class="token punctuation">:</span> <span class="token string">'&amp;'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;gt;'</span><span class="token punctuation">:</span> <span class="token string">'>'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;lt;'</span><span class="token punctuation">:</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;quot;'</span><span class="token punctuation">:</span> <span class="token string">'"'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;#123;'</span><span class="token punctuation">:</span> <span class="token string">'{'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;#125;'</span><span class="token punctuation">:</span> <span class="token string">'}'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上方式用的是插件方式，还有一种方式是用hexo自带的代码显示方式。网上很多解决方案，但很容易搞混。所以这个问题我排查了很久。所以开始的时候你就要明确你使用的是那种方式，我用的这个是根据hexo的二次开发。所以可能与其人的有那么一点不一样，要不断调试。</p><h3 id="远程推送出错"><a href="#远程推送出错" class="headerlink" title="远程推送出错"></a>远程推送出错</h3><p>当时出这个问题的时候，快一个月时间没弄这个hexo博客，有一天想写点东西放上去，但远程推送出错了。问题的主要原因如下标识</p><pre class="line-numbers language-javascript"><code class="language-javascript">ssh<span class="token punctuation">:</span> connect to host github<span class="token punctuation">.</span>com port <span class="token number">22</span><span class="token punctuation">:</span> Connection timed outfatal<span class="token punctuation">:</span> Could not read <span class="token keyword">from</span> remote repository<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>网上搜了解决方案：</p><p>1可能是网络的问题    </p><p>2重新配置密钥  </p><p>3尝试换端口</p><p>用3最后解决的问题。</p><p>git bash终端输入：ssh -T <a href="mailto:&#103;&#x69;&#116;&#x40;&#x67;&#x69;&#x74;&#x68;&#117;&#x62;&#46;&#x63;&#x6f;&#x6d;">&#103;&#x69;&#116;&#x40;&#x67;&#x69;&#x74;&#x68;&#117;&#x62;&#46;&#x63;&#x6f;&#x6d;</a></p><p><img src="/images/article22.png" alt="图二"></p><p>如果出现上图显示的内容，那就是可能22端口出问题了，然后进入~&#x2F;.ssh&#x2F;目录下修改config文件，建议直接在终端中输入vim ~&#x2F;.ssh&#x2F;config，使用vim编辑器打开此文件，一般是为空，然后加上以下代码：</p><pre class="line-numbers language-javascript"><code class="language-javascript">Host github<span class="token punctuation">.</span>comUser gitHostname ssh<span class="token punctuation">.</span>github<span class="token punctuation">.</span>comPreferredAuthentications publickeyIdentityFile <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsaPort <span class="token number">443</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>成功</p><p><img src="/images/article23.png" alt="图三"></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>以下是我在网上参考其它人的资料，觉得写的不错，分析一下。</p><p>安装插件</p><p><a href="https://cloud.tencent.com/developer/article/1952241">https://cloud.tencent.com/developer/article/1952241</a></p><p>部属在阿里云存储，提高访问速度（这个博客一样的框架）</p><p><a href="https://blog.iaimi.cn/posts/54864.html">https://blog.iaimi.cn/posts/54864.html</a></p><p>本博客框架的官方文档</p><p><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md</a></p><p>美化很细节</p><p><a href="https://blog.csdn.net/kuashijidexibao/article/details/112971657">https://blog.csdn.net/kuashijidexibao/article/details/112971657</a></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>不同的技术适合不同的场景，适合的才是最好的。今后有关Hexo的问题都会汇总到这儿。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>密码机对接使用总结</title>
      <link href="/2024/02/05/a6/"/>
      <url>/2024/02/05/a6/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&nbsp;&nbsp;  &nbsp; &nbsp; &nbsp;  最近项目中需要对接密码机，密码机的作用是：对保密性高的系统，提供专门的密码运算功能。SM1、SM2、SM3、SM4、SM9等商用密码算法，提供丰富的软件开发接口，可以用java语言实现接口调用。可以用客户端添加密钥，但要在电脑上先插入类似以前网银U盾东西。刚开始比较担心，没干过，但随着不断探索，不断熟悉中，感觉也没那么难了。</p><h3 id="接口调通"><a href="#接口调通" class="headerlink" title="接口调通"></a>接口调通</h3><p>&nbsp;  &nbsp;  这一步先用单元测试，根据密码机厂家给出的文档进行调试，只有数据连通，才能进行业务处理。但提供的文档内容有限，厂家那边技术联系不上，自己摸索只能多试。</p><h4 id="熟悉文档"><a href="#熟悉文档" class="headerlink" title="熟悉文档"></a>熟悉文档</h4><p>这种产品都是自研的，所以网上的资料很少，一定要对公司发来的文档熟悉。</p><h4 id="导入特定jar包"><a href="#导入特定jar包" class="headerlink" title="导入特定jar包"></a>导入特定jar包</h4><p>首先就是要用到特定的jar包，这个包网上的maven库没有，所以只能手动导入，密码机厂家会有提供，导入SpringBoot项目就行。</p><p><code>mvn install:install-file -DgroupId=com.jyj -DartifactId=examples -Dversion=1.0.1-SNAPSHOT -Dfile=D:\XXXX.jar -Dpackaging=jar</code></p><p>以上举例：比如jar包放在D盘的根目录，以上三个参数对应maven里的参数。我命名不规范，只要不重复就行。</p><p><img src="/images/article18.png" alt="install"></p><p>在maven中把install的信息完整填上，就能引入本地jar包</p><p><img src="/images/article18.png" alt="maven引入"></p><h4 id="调试参数"><a href="#调试参数" class="headerlink" title="调试参数"></a>调试参数</h4><p>传参的内容和文档内容还是有些差距的，比如机器ip。</p><p>总结大体流程就是   1创建会话 2获取访问控制权限 3调用接口 4关闭会话</p><p>最后调试的收获就是用密码机对传入的字符sm4加密，sm4解密，hmac做完整性。</p><p>sm4加密特点是明文数据相同情况下，密文每次生成不一样，解密的话能返回明文。hmac是同样的明文，密文数据一样。</p><h3 id="更换系统自带的登录加密方式"><a href="#更换系统自带的登录加密方式" class="headerlink" title="更换系统自带的登录加密方式"></a>更换系统自带的登录加密方式</h3><p>  &nbsp;  系统是基于ruoyi的，自带加密方式BCryptPasswordEncoder。这次我把它改为密码机加密方式。用到了刚说的测出来的sm4加解密。但难点在于这个SpringSecurity框架封装了太多东西。SpringSecurity底层细节不了解，导致我昨天晚上调试了很久，还好参考了网上一篇帖子，问题解决。</p><p>我刚开始想的是你既然用的是BCryptPasswordEncoder加密方式，那我把你加密方式删了，改成我的不就行了吗？encryptPassword（生成密码）matchesPassword（判断密码是否相同）。这两个改了以后，经过debug逻辑上没问题。但就是报错。结果那个帖子给了我一些思路：</p><p>1 新增加一个类xxxPasswordEncoder继承PasswordEncoder，实现encode和matches两个方法，实现自定义加密逻辑</p><p>2 第二步找到securityConfig的配置文件，在项目中的framework 中的config，可以找到两个方法，</p><p>在配置文件中新增一个xxxPasswordEncoder方法，注入bean,</p><p>把configure方法中的bCryptPasswordEncoder()修改为新增的xxxpasswordEncoder()</p><p><img src="/images/article20.png" alt="configure"></p><p>3 修改common中的utils的securityUtils，其中要修改两个方法encryptPassword和matchesPassword（登录的流程会调用这两个方法），改为调用密码机的逻辑，原来的逻辑注释。</p><p>这样系统登录就会自动调用你写的逻辑，很神奇。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>通过这一波操作下来，能略微感受到优雅代码和屎山代码的那种差异。优雅代码便于维护，而屎山代码只要稍微一改很容易出bug。码字不易，请多鼓励。如有疑问请加我QQ1239463490</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重置GitLab的root用户密码</title>
      <link href="/2024/02/03/a5/"/>
      <url>/2024/02/03/a5/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>​        最近一直想通过GitLab+Jenkins+Docker做一个自动的集成部署整合，前段时间安装的GitLab的登录密码忘了，重新安装这个软件很麻烦，因为GitLab很占存储，而至于为什么用GitLab而不是Gitee，因为是用的本地虚拟机搭建的服务器，而不是云服务器，如果Gitee的数据向本地服务器发送数据，像搞支付流程那样内网穿透？有点麻烦吧。自己的电脑16G内存，应该勉强能带的动。参考网上的一些解决方案，更改GitLab密码方案自己总结如下。</p><h3 id="解决详细流程（亲测可用）"><a href="#解决详细流程（亲测可用）" class="headerlink" title="解决详细流程（亲测可用）"></a>解决详细流程（亲测可用）</h3><p>1 我们这个GitLab通过docker安装，所以先通过本地Linux服务器，进入到Docker内。aaf02c529d24 是这个容器的ID</p><p><code>docker exec -it aaf02c529d24 /bin/</code></p><p>2 执行以下代码，时间可能会稍长一些，出现下图标记的内容说明成功，再往下走</p><p> <code>gitlab-rails console -e production</code></p><p><img src="/images/article16.jpg" alt="图一"></p><p>3 通过命令查找，确定用户为“root”</p><p><code>user = User.find_by_username &#39;root&#39;</code></p><p><img src="/images/article17.jpg" alt="图二"></p><p>4 输入修改的密码，再确认密码</p><p><code>user.password=&quot;xxx&quot;</code></p><p><code>user.password_confirmation=&quot;xxx&quot;</code></p><p>5 保存重置信息，并结束</p><p><code>user.save!</code></p><p><code>exit</code></p><p>保存的时候报以下错误，说明你的密码太简单，比如admin这种有规律。改一下就行</p><p>Validation failed: Password must not contain commonly used combinations of words and letters (ActiveRecirb(main):013:0&gt; user.password&#x3D;</p><p>以上操作完，不用重启就能登录账号，上传代码了。push的时候我还碰到一个小问题，就是上传超时。检查发现从GitLab粘贴的http地址是错的，不是你Linux的ip地址，这个注意一下，要不然排查很久。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ruoyi导入excel数据去重</title>
      <link href="/2024/01/24/a4/"/>
      <url>/2024/01/24/a4/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>​        最近项目中用到开源平台ruoyi，有一个Excel导入需求功能是这样的：把excel数据导入系统。刚开始百度查解决方法，这个平台本来就有现成的ExcelUtil工具。把前端传来的数据直接转成List数据，然后遍历插入数据库即可。前端部分的代码，官网还是很完整的，粘贴上直接能用。</p><p><img src="/images/article15.jpg" alt="前端操作页"></p><p>​         但这样无脑导入数据，在实际应用中还是存在不完美的地方，如图有一个可选项（是否更新已经存在的用户数据），如果数据表中有已经存在的数据，那么为了避免数据重复，有一个覆盖的方案是会更合理的。</p><p>​网上疯狂的找相关的资料，但后端的代码几乎没有。没办法只能自己慢慢想，最后经过无数次修改，调试，三天时间终于有了基本能使用的效果。主要是突然想到用map集合，因为list集合里面是对象类型，对象里面才是id，刚开始只想用list集合操作，但效果都不太好，后来索性用map。key存id，value存对象值。</p><p>​最后基本实现根据danganid判断是否重复，如果重复，则excel新数据覆盖系统的旧数据，如果不重复，则导入进系统。</p><h3 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h3><p> 基本上复制过来改一下地址就行。<a href="https://doc.ruoyi.vip/ruoyi-vue/document/htsc.html#%E5%AF%BC%E5%85%A5%E5%AE%9E%E7%8E%B0%E6%B5%81%E7%A8%8B">ruoyi官网文档</a></p><h3 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h3><p>直接上代码，请原来我的代码分层不讲究…..</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     *     * excel导入     */</span>    <span class="token annotation punctuation">@PreAuthorize</span><span class="token punctuation">(</span><span class="token string">"@ss.hasPermi('hetongq:info:ex')"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/importData"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> AjaxResult <span class="token function">importData</span><span class="token punctuation">(</span>MultipartFile file<span class="token punctuation">,</span> <span class="token keyword">boolean</span> updateSupport<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception    <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        System.out.println(updateSupport);</span>        <span class="token comment" spellcheck="true">//传来false，不更新已经存在的数据</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>updateSupport<span class="token operator">==</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ExcelUtil<span class="token operator">&lt;</span>DanganInfo<span class="token operator">></span> util <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExcelUtil</span><span class="token operator">&lt;</span>DanganInfo<span class="token operator">></span><span class="token punctuation">(</span>DanganInfo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>DanganInfo<span class="token operator">></span> userList <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">importExcel</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        System.out.println(userList);</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>DanganInfo str <span class="token operator">:</span> userList<span class="token punctuation">)</span><span class="token punctuation">{</span>                danganInfoService<span class="token punctuation">.</span><span class="token function">insertDanganInfo</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//获取传来的Excel数据</span>            ExcelUtil<span class="token operator">&lt;</span>DanganInfo<span class="token operator">></span> util <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExcelUtil</span><span class="token operator">&lt;</span>DanganInfo<span class="token operator">></span><span class="token punctuation">(</span>DanganInfo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>DanganInfo<span class="token operator">></span> userList <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">importExcel</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*SpringSecurity工具类：获取登录用户，             因为项目需求是不同用户只对自己的添加的数据             有增删改查的权限,传参的时候要加上用户标识字段，             这里先只分为Admin所有数据的操作权限，和其它只有自己的数据。             */</span>            LoginUser loginUser <span class="token operator">=</span> SecurityUtils<span class="token punctuation">.</span><span class="token function">getLoginUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String username <span class="token operator">=</span> loginUser<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取数据库的信息</span>            DanganInfo danganInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DanganInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            danganInfo<span class="token punctuation">.</span><span class="token function">setCreateby</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>DanganInfo<span class="token operator">></span> list <span class="token operator">=</span> danganInfoService<span class="token punctuation">.</span><span class="token function">selectDanganInfoList</span><span class="token punctuation">(</span>danganInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>                            List list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//Excel表的数据，list转为map，key为danganId，value是DanganInfo对象</span>            Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>DanganInfo<span class="token operator">></span> map<span class="token operator">=</span>userList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>DanganInfo<span class="token operator">:</span><span class="token operator">:</span>getDanganId<span class="token punctuation">,</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//数据库表的数据，list转为map</span>            Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>DanganInfo<span class="token operator">></span> map1<span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>DanganInfo<span class="token operator">:</span><span class="token operator">:</span>getDanganId<span class="token punctuation">,</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//遍历数据库表的danganId字段，后面要比对</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>String in <span class="token operator">:</span> map1<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//以DanganId为标准，如果相等说明Excel的数据有重复，以Excel数据为标准更新</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>String in <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span>DanganInfo info <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">getDanganId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            danganInfoService<span class="token punctuation">.</span><span class="token function">updateDanganInfo1</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//list2中是所有数据库表的DanganId字段。Excel中的字段遍历，</span>                <span class="token comment" spellcheck="true">// 如果包含Danganid，说明这个Danganid存在，不用添加，否则添加，这个逻辑慢慢体会就理解了</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>String in <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>list2<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                        danganInfoService<span class="token punctuation">.</span><span class="token function">insertDanganInfo</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> AjaxResult<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">"上传成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>虽然ruoyi提供了后台管理的一些功能，但在实际企业需求，也有一些特殊的地方。以前听人说，工作就是复制粘贴，还有要把数据结构算法学好，数据结构与算法没啥用…..我觉得作为一个普通人，还是要有自己的判断，走自己的路。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> ruoyi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊一聊Linux相关的话题</title>
      <link href="/2024/01/20/a2/"/>
      <url>/2024/01/20/a2/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我记得在我2020年那会，刚开始学习Linux命令的时候，要先在本地电脑下载一个虚拟机，然后在安装操作系统，接下来就比较抵触Linux操作系统和Windwos操作系统操作方式和界面显示。当然随着使用频率的增加，现在也适应了这种操作方式。本地虚拟机安装Linux和云服务器都用过，感觉各有优缺吧。本地不用花钱，云服务器最低配的话一年至少100块。平时学习一些小项目基本两者使用差别不大。无非是云服务器可以把项目部署上，可以远程访问。对新手来说主要问题就是vmware这种本地虚拟化软件开始会有很多坑，而这种坑对开发来讲其实是没有意义的坑。所以今天我把本地安装LInux遇到的坑总结一下，大家以后碰到了做一个参考。</p><p>本篇重点讨论问题，具体安装教程网上很多。</p><h3 id="1-先判断虚拟机是否关闭防火墙"><a href="#1-先判断虚拟机是否关闭防火墙" class="headerlink" title="1 先判断虚拟机是否关闭防火墙"></a>1 先判断虚拟机是否关闭防火墙</h3><p>查看防火墙状态<br><code>systemctl status firewalld</code><br>关闭防火墙（临时）<br><code>service iptables stop</code></p><h3 id="2然后判断虚拟机网络和vmware是否在同一个网段"><a href="#2然后判断虚拟机网络和vmware是否在同一个网段" class="headerlink" title="2然后判断虚拟机网络和vmware是否在同一个网段"></a>2然后判断虚拟机网络和vmware是否在同一个网段</h3><p>vmvare的网段</p><p><img src="/images/article11.png" alt="Lena"></p><p>通过以下命令设置Linux的ip</p><p><code>vi /etc/sysconfig/network-scripts/ifcfg-ens33</code></p><p><img src="/images/article12.png" alt="Lena"></p><p>注意看图片标识的ip，网关。</p><p>这样配置的话本地能和虚拟机互相ping通</p><p>但是虚拟机ping <a href="www.baidu.com">百度</a>有问题，还有就是使用docker，拉取镜像失败。说明不能联网。查百度发现是DNS设置有问题</p><h3 id="3配置Linux的DNS"><a href="#3配置Linux的DNS" class="headerlink" title="3配置Linux的DNS"></a>3配置Linux的DNS</h3><p><code>vi /etc/resolv.conf</code></p><p><img src="/images/article13.png" alt="Lena"></p><h3 id="问题解决："><a href="#问题解决：" class="headerlink" title="问题解决："></a>问题解决：</h3><p><img src="/images/article14.png" alt="Lena"></p><p>这样就能在linux愉快的下载各种软件了！</p><p>tip:如果克隆了相同的虚拟机，这里除了IP地址还要改一下UUID</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/2024/01/10/a3/"/>
      <url>/2024/01/10/a3/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>后端开发，项目部署在Linux服务器上，所以对于开发人员，要对一般对常用的操作命令要有一定的掌握，但我觉得没必要花太多时间研究很多操作系统细节。这篇就汇总一下平时常用的，以便不时查阅。</p><p>创建多级目录文件夹（如果没有上级文件夹，要加-p）</p><p><code>mkdir -p /Users/name/docker/jenkins</code></p><p>列出当前系统中所有正在监听的端口及对应的进程。在输出结果中，我们可以找到占用目标端口的进程PID，并进一步确定该进程的详细信息</p><p><code>netstat -tlnp</code></p><p>查找文件在哪个目录</p><p><code>find / -name &quot;文件名&quot;</code></p><p>启动jar包项目，并打印日志（关闭窗口不影响项目运行）</p><p><code>nohup java -jar ruoyi-admin.jar &gt;&gt; ./info.log &amp;</code></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/12/10/hello-world/"/>
      <url>/2023/12/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">select</span> * from user where id<span class="token operator">=</span>1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code>alert(&#39;Hello World!&#39;);alert(&#39;Hello World!&#39;);alert(&#39;Hello World!&#39;);</code></pre><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><pre><code>&#123;% codeblock [title] [lang:java] [url] [link text] [additional options] %&#125;code snippet&#123;% endcodeblock %&#125;</code></pre><pre><code></code></pre><pre><code>alert(&#39;Hello World!&#39;);</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL优化技巧</title>
      <link href="/2023/10/01/a1/"/>
      <url>/2023/10/01/a1/</url>
      
        <content type="html"><![CDATA[<h2 id="优化技巧"><a href="#优化技巧" class="headerlink" title="优化技巧"></a>优化技巧</h2><h3 id="避免使用select"><a href="#避免使用select" class="headerlink" title="避免使用select"></a><strong>避免使用select</strong></h3><p>很多时候，我们写sql语句时，为了方便，喜欢直接使用<code>select *</code>，一次性查出表中所有列的数据。</p><p><code>select * from user where id=1;</code></p><p>在实际业务场景中，可能我们真正需要使用的只有其中一两列。查了很多数据，但是不用，白白浪费了数据库资源，比如：内存或者cpu。</p><p>此外，多查出来的数据，通过网络IO传输的过程中，也会增加数据传输的时间。</p><p>还有一个最重要的问题是：<code>select *</code>不会走<code>覆盖索引</code>，会出现大量的<code>回表</code>操作，而从导致查询sql的性能很低。</p><p>那么，如何优化呢？</p><p><code>select name,age from user where id=1;</code></p><p>sql语句查询时，只查需要用到的列，多余的列根本无需查出来。</p><h3 id="小表驱动大表"><a href="#小表驱动大表" class="headerlink" title="小表驱动大表"></a><strong>小表驱动大表</strong></h3><p><code>select * from order</code><br><code>where user_id in (select id from user where status=1)</code></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
