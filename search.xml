<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>密码机对接使用总结</title>
      <link href="/2024/02/05/a6/"/>
      <url>/2024/02/05/a6/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&nbsp;&nbsp;  &nbsp; &nbsp; &nbsp;  最近项目中需要对接密码机，密码机的作用是：对保密性高的系统，提供专门的密码运算功能。SM1、SM2、SM3、SM4、SM9等商用密码算法，提供丰富的软件开发接口，可以用java语言实现接口调用。可以用客户端添加密钥，但要在电脑上先插入类似以前网银U盾东西。刚开始比较担心，没干过，但随着不断探索，不断熟悉中，感觉也没那么难了。</p><h3 id="接口调通"><a href="#接口调通" class="headerlink" title="接口调通"></a>接口调通</h3><p>&nbsp;  &nbsp;  这一步先用单元测试，根据密码机厂家给出的文档进行调试，只有数据连通，才能进行业务处理。但提供的文档内容有限，厂家那边技术联系不上，自己摸索只能多试。</p><h4 id="熟悉文档"><a href="#熟悉文档" class="headerlink" title="熟悉文档"></a>熟悉文档</h4><p>这种产品都是自研的，所以网上的资料很少，一定要对公司发来的文档熟悉。</p><h4 id="导入特定jar包"><a href="#导入特定jar包" class="headerlink" title="导入特定jar包"></a>导入特定jar包</h4><p>首先就是要用到特定的jar包，这个包网上的maven库没有，所以只能手动导入，密码机厂家会有提供，导入SpringBoot项目就行。</p><p><code>mvn install:install-file -DgroupId=com.jyj -DartifactId=examples -Dversion=1.0.1-SNAPSHOT -Dfile=D:\XXXX.jar -Dpackaging=jar</code></p><p>以上举例：比如jar包放在D盘的根目录，以上三个参数对应maven里的参数。我命名不规范，只要不重复就行。</p><p><img src="/images/article18.png" alt="install"></p><p>在maven中把install的信息完整填上，就能引入本地jar包</p><p><img src="/images/article18.png" alt="maven引入"></p><h4 id="调试参数"><a href="#调试参数" class="headerlink" title="调试参数"></a>调试参数</h4><p>传参的内容和文档内容还是有些差距的，比如机器ip。</p><p>总结大体流程就是   1创建会话 2获取访问控制权限 3调用接口 4关闭会话</p><p>最后调试的收获就是用密码机对传入的字符sm4加密，sm4解密，hmac做完整性。</p><p>sm4加密特点是明文数据相同情况下，密文每次生成不一样，解密的话能返回明文。hmac是同样的明文，密文数据一样。</p><h3 id="更换系统自带的登录加密方式"><a href="#更换系统自带的登录加密方式" class="headerlink" title="更换系统自带的登录加密方式"></a>更换系统自带的登录加密方式</h3><p>  &nbsp;  系统是基于ruoyi的，自带加密方式BCryptPasswordEncoder。这次我把它改为密码机加密方式。用到了刚说的测出来的sm4加解密。但难点在于这个SpringSecurity框架封装了太多东西。SpringSecurity底层细节不了解，导致我昨天晚上调试了很久，还好参考了网上一篇帖子，问题解决。</p><p>我刚开始想的是你既然用的是BCryptPasswordEncoder加密方式，那我把你加密方式删了，改成我的不就行了吗？encryptPassword（生成密码）matchesPassword（判断密码是否相同）。这两个改了以后，经过debug逻辑上没问题。但就是报错。结果那个帖子给了我一些思路：</p><p>1 新增加一个类xxxPasswordEncoder继承PasswordEncoder，实现encode和matches两个方法，实现自定义加密逻辑</p><p>2 第二步找到securityConfig的配置文件，在项目中的framework 中的config，可以找到两个方法，</p><p>在配置文件中新增一个xxxPasswordEncoder方法，注入bean,</p><p>把configure方法中的bCryptPasswordEncoder()修改为新增的xxxpasswordEncoder()</p><p><img src="/images/article20.png" alt="configure"></p><p>3 修改common中的utils的securityUtils，其中要修改两个方法encryptPassword和matchesPassword（登录的流程会调用这两个方法），改为调用密码机的逻辑，原来的逻辑注释。</p><p>这样系统登录就会自动调用你写的逻辑，很神奇。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>通过这一波操作下来，能略微感受到优雅代码和屎山代码的那种差异。优雅代码便于维护，而屎山代码只要稍微一改很容易出bug。码字不易，请多鼓励。如有疑问请加我QQ1239463490</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重置GitLab的root用户密码</title>
      <link href="/2024/02/03/a5/"/>
      <url>/2024/02/03/a5/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>​        最近一直想通过GitLab+Jenkins+Docker做一个自动的集成部署整合，前段时间安装的GitLab的登录密码忘了，重新安装这个软件很麻烦，因为GitLab很占存储，而至于为什么用GitLab而不是Gitee，因为是用的本地服务器，而不是云服务器，如果Gitee的数据向本地GiteeLab发送，像搞支付流程那样内网穿透？有点麻烦吧。自己的电脑16G内存，应该勉强能带的动。参考网上的一些解决方案，更改GitLab密码方案自己总结如下。</p><h3 id="解决详细流程（亲测可用）"><a href="#解决详细流程（亲测可用）" class="headerlink" title="解决详细流程（亲测可用）"></a>解决详细流程（亲测可用）</h3><p>1 我们这个GitLab通过docker安装，所以先通过本地Linux服务器，进入到Docker内。aaf02c529d24 是这个容器的ID</p><p><code>docker exec -it aaf02c529d24 /bin/</code></p><p>2 执行以下代码，时间可能会稍长一些，出现下图标记的内容说明成功，再往下走</p><p> <code>gitlab-rails console -e production</code></p><p><img src="/images/article16.jpg" alt="图一"></p><p>3 通过命令查找，确定用户为“root”</p><p><code>user = User.find_by_username &#39;root&#39;</code></p><p><img src="/images/article17.jpg" alt="图二"></p><p>4 输入修改的密码，再确认密码</p><p><code>user.password=&quot;xxx&quot;</code></p><p><code>user.password_confirmation=&quot;xxx&quot;</code></p><p>5 保存重置信息，并结束</p><p><code>user.save!</code></p><p><code>exit</code></p><p>保存的时候报以下错误，说明你的密码太简单，比如admin这种有规律。改一下就行</p><p>Validation failed: Password must not contain commonly used combinations of words and letters (ActiveRecirb(main):013:0&gt; user.password&#x3D;</p><p>以上操作完，不用重启就能登录账号，上传代码了。push的时候我还碰到一个小问题，就是上传超时。检查发现从GitLab粘贴的http地址是错的，不是你Linux的ip地址，这个注意一下，要不然排查很久。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ruoyi导入excel数据去重</title>
      <link href="/2024/01/24/a4/"/>
      <url>/2024/01/24/a4/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>​        最近项目中用到开源平台ruoyi，有一个Excel导入需求功能是这样的：把excel数据导入系统。刚开始百度查解决方法，这个平台本来就有现成的ExcelUtil工具。把前端传来的数据直接转成List数据，然后遍历插入数据库即可。前端部分的代码，官网还是很完整的，粘贴上直接能用。</p><p><img src="/images/article15.jpg" alt="前端操作页"></p><p>​         但这样无脑导入数据，在实际应用中还是存在不完美的地方，如图有一个可选项（是否更新已经存在的用户数据），如果数据表中有已经存在的数据，那么为了避免数据重复，有一个覆盖的方案是会更合理的。</p><p>​网上疯狂的找相关的资料，但后端的代码几乎没有。没办法只能自己慢慢想，最后经过无数次修改，调试，三天时间终于有了基本能使用的效果。主要是突然想到用map集合，因为list集合里面是对象类型，对象里面才是id，刚开始只想用list集合操作，但效果都不太好，后来索性用map。key存id，value存对象值。</p><p>​最后基本实现根据danganid判断是否重复，如果重复，则excel新数据覆盖系统的旧数据，如果不重复，则导入进系统。</p><h3 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h3><p> 基本上复制过来改一下地址就行。<a href="https://doc.ruoyi.vip/ruoyi-vue/document/htsc.html#%E5%AF%BC%E5%85%A5%E5%AE%9E%E7%8E%B0%E6%B5%81%E7%A8%8B">ruoyi官网文档</a></p><h3 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h3><p>直接上代码，请原来我的代码分层不讲究…..</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     *     * excel导入     */</span>    <span class="token annotation punctuation">@PreAuthorize</span><span class="token punctuation">(</span><span class="token string">"@ss.hasPermi('hetongq:info:ex')"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/importData"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> AjaxResult <span class="token function">importData</span><span class="token punctuation">(</span>MultipartFile file<span class="token punctuation">,</span> <span class="token keyword">boolean</span> updateSupport<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception    <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        System.out.println(updateSupport);</span>        <span class="token comment" spellcheck="true">//传来false，不更新已经存在的数据</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>updateSupport<span class="token operator">==</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ExcelUtil<span class="token operator">&lt;</span>DanganInfo<span class="token operator">></span> util <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExcelUtil</span><span class="token operator">&lt;</span>DanganInfo<span class="token operator">></span><span class="token punctuation">(</span>DanganInfo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>DanganInfo<span class="token operator">></span> userList <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">importExcel</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        System.out.println(userList);</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>DanganInfo str <span class="token operator">:</span> userList<span class="token punctuation">)</span><span class="token punctuation">{</span>                danganInfoService<span class="token punctuation">.</span><span class="token function">insertDanganInfo</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//获取传来的Excel数据</span>            ExcelUtil<span class="token operator">&lt;</span>DanganInfo<span class="token operator">></span> util <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExcelUtil</span><span class="token operator">&lt;</span>DanganInfo<span class="token operator">></span><span class="token punctuation">(</span>DanganInfo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>DanganInfo<span class="token operator">></span> userList <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">importExcel</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*SpringSecurity工具类：获取登录用户，             因为项目需求是不同用户只对自己的添加的数据             有增删改查的权限,传参的时候要加上用户标识字段，             这里先只分为Admin所有数据的操作权限，和其它只有自己的数据。             */</span>            LoginUser loginUser <span class="token operator">=</span> SecurityUtils<span class="token punctuation">.</span><span class="token function">getLoginUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String username <span class="token operator">=</span> loginUser<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取数据库的信息</span>            DanganInfo danganInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DanganInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            danganInfo<span class="token punctuation">.</span><span class="token function">setCreateby</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>DanganInfo<span class="token operator">></span> list <span class="token operator">=</span> danganInfoService<span class="token punctuation">.</span><span class="token function">selectDanganInfoList</span><span class="token punctuation">(</span>danganInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>                            List list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//Excel表的数据，list转为map，key为danganId，value是DanganInfo对象</span>            Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>DanganInfo<span class="token operator">></span> map<span class="token operator">=</span>userList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>DanganInfo<span class="token operator">:</span><span class="token operator">:</span>getDanganId<span class="token punctuation">,</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//数据库表的数据，list转为map</span>            Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>DanganInfo<span class="token operator">></span> map1<span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>DanganInfo<span class="token operator">:</span><span class="token operator">:</span>getDanganId<span class="token punctuation">,</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//遍历数据库表的danganId字段，后面要比对</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>String in <span class="token operator">:</span> map1<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//以DanganId为标准，如果相等说明Excel的数据有重复，以Excel数据为标准更新</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>String in <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span>DanganInfo info <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">getDanganId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            danganInfoService<span class="token punctuation">.</span><span class="token function">updateDanganInfo1</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//list2中是所有数据库表的DanganId字段。Excel中的字段遍历，</span>                <span class="token comment" spellcheck="true">// 如果包含Danganid，说明这个Danganid存在，不用添加，否则添加，这个逻辑慢慢体会就理解了</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>String in <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>list2<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                        danganInfoService<span class="token punctuation">.</span><span class="token function">insertDanganInfo</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> AjaxResult<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">"上传成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>虽然ruoyi提供了后台管理的一些功能，但在实际企业需求，也有一些特殊的地方。以前听人说，工作就是复制粘贴，还有要把数据结构算法学好，数据结构与算法没啥用…..我觉得作为一个普通人，还是要有自己的判断，走自己的路。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> ruoyi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊一聊Linux相关的话题</title>
      <link href="/2024/01/20/a2/"/>
      <url>/2024/01/20/a2/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我记得在我2020年那会，刚开始学习Linux命令的时候，要先在本地电脑下载一个虚拟机，然后在安装操作系统，接下来就比较抵触Linux操作系统和Windwos操作系统操作方式和界面显示。当然随着使用频率的增加，现在也适应了这种操作方式。本地虚拟机安装Linux和云服务器都用过，感觉各有优缺吧。本地不用花钱，云服务器最低配的话一年至少100块。平时学习一些小项目基本两者使用差别不大。无非是云服务器可以把项目部署上，可以远程访问。对新手来说主要问题就是vmware这种本地虚拟化软件开始会有很多坑，而这种坑对开发来讲其实是没有意义的坑。所以今天我把本地安装LInux遇到的坑总结一下，大家以后碰到了做一个参考。</p><p>本篇重点讨论问题，具体安装教程网上很多。</p><h3 id="1-先判断虚拟机是否关闭防火墙"><a href="#1-先判断虚拟机是否关闭防火墙" class="headerlink" title="1 先判断虚拟机是否关闭防火墙"></a>1 先判断虚拟机是否关闭防火墙</h3><p>查看防火墙状态<br><code>systemctl status firewalld</code><br>关闭防火墙（临时）<br><code>service iptables stop</code></p><h3 id="2然后判断虚拟机网络和vmware是否在同一个网段"><a href="#2然后判断虚拟机网络和vmware是否在同一个网段" class="headerlink" title="2然后判断虚拟机网络和vmware是否在同一个网段"></a>2然后判断虚拟机网络和vmware是否在同一个网段</h3><p>vmvare的网段</p><p><img src="/images/article11.png" alt="Lena"></p><p>通过以下命令设置Linux的ip</p><p><code>vi /etc/sysconfig/network-scripts/ifcfg-ens33</code></p><p><img src="/images/article12.png" alt="Lena"></p><p>注意看图片标识的ip，网关。</p><p>这样配置的话本地能和虚拟机互相ping通</p><p>但是虚拟机ping <a href="www.baidu.com">百度</a>有问题，还有就是使用docker，拉取镜像失败。说明不能联网。查百度发现是DNS设置有问题</p><h3 id="3配置Linux的DNS"><a href="#3配置Linux的DNS" class="headerlink" title="3配置Linux的DNS"></a>3配置Linux的DNS</h3><p><code>vi /etc/resolv.conf</code></p><p><img src="/images/article13.png" alt="Lena"></p><h3 id="问题解决："><a href="#问题解决：" class="headerlink" title="问题解决："></a>问题解决：</h3><p><img src="/images/article14.png" alt="Lena"></p><p>这样就能在linux愉快的下载各种软件了！</p><p>tip:如果克隆了相同的虚拟机，这里除了IP地址还要改一下UUID</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/2024/01/10/a3/"/>
      <url>/2024/01/10/a3/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>后端开发，项目部署在Linux服务器上，所以对于开发人员，要对一般对常用的操作命令要有一定的掌握，但我觉得没必要花太多时间研究很多操作系统细节。这篇就汇总一下平时常用的，以便不时查阅。</p><p>创建多级目录文件夹（如果没有上级文件夹，要加-p）</p><p><code>mkdir -p /Users/name/docker/jenkins</code></p><p>列出当前系统中所有正在监听的端口及对应的进程。在输出结果中，我们可以找到占用目标端口的进程PID，并进一步确定该进程的详细信息</p><p><code>netstat -tlnp</code></p><p>查找文件在哪个目录</p><p><code>find / -name &quot;文件名&quot;</code></p><p>启动jar包项目，并打印日志（关闭窗口不影响项目运行）</p><p><code>nohup java -jar ruoyi-admin.jar &gt;&gt; ./info.log &amp;</code></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/12/10/hello-world/"/>
      <url>/2023/12/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">select</span> * from user where id<span class="token operator">=</span>1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code>alert(&#39;Hello World!&#39;);alert(&#39;Hello World!&#39;);alert(&#39;Hello World!&#39;);</code></pre><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><pre><code>&#123;% codeblock [title] [lang:java] [url] [link text] [additional options] %&#125;code snippet&#123;% endcodeblock %&#125;</code></pre><pre><code></code></pre><pre><code>alert(&#39;Hello World!&#39;);</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL优化技巧</title>
      <link href="/2023/10/01/a1/"/>
      <url>/2023/10/01/a1/</url>
      
        <content type="html"><![CDATA[<h2 id="优化技巧"><a href="#优化技巧" class="headerlink" title="优化技巧"></a>优化技巧</h2><h3 id="避免使用select"><a href="#避免使用select" class="headerlink" title="避免使用select"></a><strong>避免使用select</strong></h3><p>很多时候，我们写sql语句时，为了方便，喜欢直接使用<code>select *</code>，一次性查出表中所有列的数据。</p><p><code>select * from user where id=1;</code></p><p>在实际业务场景中，可能我们真正需要使用的只有其中一两列。查了很多数据，但是不用，白白浪费了数据库资源，比如：内存或者cpu。</p><p>此外，多查出来的数据，通过网络IO传输的过程中，也会增加数据传输的时间。</p><p>还有一个最重要的问题是：<code>select *</code>不会走<code>覆盖索引</code>，会出现大量的<code>回表</code>操作，而从导致查询sql的性能很低。</p><p>那么，如何优化呢？</p><p><code>select name,age from user where id=1;</code></p><p>sql语句查询时，只查需要用到的列，多余的列根本无需查出来。</p><h3 id="小表驱动大表"><a href="#小表驱动大表" class="headerlink" title="小表驱动大表"></a><strong>小表驱动大表</strong></h3><p><code>select * from order</code><br><code>where user_id in (select id from user where status=1)</code></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
